import requests
import json
import os
from datetime import datetime

def write_to_file(text, filename='try.md'):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª –∏ –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å"""
    print(text)  # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    try:
        with open(filename, 'a', encoding='utf-8') as f:
            f.write(text + '\n')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")

def clear_output_file(filename='try.md'):
    """–û—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª –≤—ã–≤–æ–¥–∞"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"# –û–±—ä—è–≤–ª–µ–Ω–∏—è Cian.ru - {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

def load_seen_offers():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ID —É–∂–µ –≤–∏–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    try:
        if os.path.exists('seen_offers.json'):
            with open('seen_offers.json', 'r', encoding='utf-8') as f:
                return set(json.load(f))
    except:
        pass
    return set()

def save_seen_offers(offer_ids):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    try:
        with open('seen_offers.json', 'w', encoding='utf-8') as f:
            json.dump(list(offer_ids), f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def main():
    # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –≤—ã–≤–æ–¥–∞
    clear_output_file()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –≤–∏–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    seen_offers = load_seen_offers()
    
    headers = {
        'accept': '*/*',
        'accept-language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
        'content-type': 'application/json',
        'origin': 'https://perm.cian.ru',
        'priority': 'u=1, i',
        'referer': 'https://perm.cian.ru/',
        'sec-ch-ua': '"Google Chrome";v="137", "Chromium";v="137", "Not/A)Brand";v="24"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"macOS"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
    }
    
    json_data = {
        'jsonQuery': {
            '_type': 'commercialrent',
            'engine_version': {
                'type': 'term',
                'value': 2,
            },
            'office_type': {
                'type': 'terms',
                'value': [
                    1,
                    3,
                ],
            },
            'is_by_commercial_owner': {
                'type': 'term',
                'value': True,
            },
            'region': {
                'type': 'terms',
                'value': [
                    4927,
                ],
            },
            'publish_period': {
                'type': 'term',
                'value': 2592000,  # 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (30 * 24 * 3600)
            },
        },
    }

    try:
        response = requests.post(
            'https://api.cian.ru/commercial-search-offers/desktop/v1/offers/get-offers/',
            headers=headers,
            json=json_data,
        )
        
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        data = response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
        offers = data.get('data', {}).get('suggestOffersSerializedList', [])
        if not offers:
            offers = data.get('data', {}).get('offersSerialized', [])
        
        total_count = data.get('data', {}).get('offerCount', 0)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        new_offers = []
        current_offer_ids = set()
        
        for offer in offers:
            offer_id = offer.get('id')
            current_offer_ids.add(offer_id)
            if offer_id not in seen_offers:
                new_offers.append(offer)
        
        write_to_file("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞")
        write_to_file(f"- **–ü–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞:** –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü (30 –¥–Ω–µ–π)")
        write_to_file(f"- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:** {total_count}")
        write_to_file(f"- **–ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:** {len(new_offers)}")
        write_to_file(f"- **–£–∂–µ –≤–∏–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:** {len(offers) - len(new_offers)}")
        write_to_file("")
        
        if new_offers:
            write_to_file("## üÜï –ù–û–í–´–ï –û–ë–™–Ø–í–õ–ï–ù–ò–Ø:")
            write_to_file("")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
            for i, offer in enumerate(new_offers):
                write_to_file(f"### üìã –ù–û–í–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï {i+1}")
                write_to_file("")
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                offer_id = offer.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω')
                write_to_file(f"**üÜî ID:** {offer_id}")
                
                # –¶–µ–Ω–∞
                price_info = offer.get('bargainTerms', {})
                if price_info.get('price'):
                    price_text = f"{price_info['price']:,} ‚ÇΩ/–º–µ—Å."
                    if price_info.get('priceType') == 'squareMeter':
                        price_text += f" ({price_info['price']} ‚ÇΩ/–º¬≤)"
                else:
                    price_text = offer.get('formattedShortPrice', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                write_to_file(f"**üí∞ –¶–µ–Ω–∞:** {price_text}")
                
                # –ü–ª–æ—â–∞–¥—å
                area = offer.get('totalArea', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                if area and area != '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
                    area = f"{area} –º¬≤"
                write_to_file(f"**üìè –ü–ª–æ—â–∞–¥—å:** {area}")
                
                # –ê–¥—Ä–µ—Å
                geo = offer.get('geo', {})
                address = geo.get('userInput', '–ù–µ —É–∫–∞–∑–∞–Ω')
                write_to_file(f"**üìç –ê–¥—Ä–µ—Å:** {address}")
                
                # –≠—Ç–∞–∂
                floor = offer.get('floorNumber', '–ù–µ —É–∫–∞–∑–∞–Ω')
                building = offer.get('building', {})
                floors_total = building.get('floorsCount', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                write_to_file(f"**üè¢ –≠—Ç–∞–∂:** {floor}/{floors_total}")
                
                # –¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è
                specialty = offer.get('specialty', {})
                types = specialty.get('types', [])
                if types:
                    types_ru = []
                    specialties = specialty.get('specialties', [])
                    for spec in specialties[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–∏–ø–∞
                        types_ru.append(spec.get('rusName', ''))
                    types_text = ', '.join(filter(None, types_ru))
                    if len(specialties) > 3:
                        types_text += f" –∏ –µ—â–µ {len(specialties) - 3}"
                else:
                    types_text = "–°–≤–æ–±–æ–¥–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ"
                write_to_file(f"**üè™ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:** {types_text}")
                
                # –û–ø–∏—Å–∞–Ω–∏–µ (–∫—Ä–∞—Ç–∫–æ–µ)
                description = offer.get('description', '')
                if description:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞
                    short_desc = description[:200] + "..." if len(description) > 200 else description
                    write_to_file(f"**üìù –û–ø–∏—Å–∞–Ω–∏–µ:** {short_desc}")
                
                # –ö–æ–Ω—Ç–∞–∫—Ç—ã
                phones = offer.get('phones', [])
                if phones:
                    phone = phones[0]
                    phone_str = f"+{phone.get('countryCode', '7')} {phone.get('number', '')}"
                    write_to_file(f"**üìû –¢–µ–ª–µ—Ñ–æ–Ω:** {phone_str}")
                
                # –°—Å—ã–ª–∫–∞
                full_url = offer.get('fullUrl', '')
                if full_url:
                    write_to_file(f"**üîó –°—Å—ã–ª–∫–∞:** [{full_url}]({full_url})")
                
                # –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                added_time = offer.get('humanizedTimedelta', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                write_to_file(f"**üïí –î–æ–±–∞–≤–ª–µ–Ω–æ:** {added_time}")
                
                write_to_file("")
                write_to_file("---")
                write_to_file("")
        else:
            write_to_file("## ‚úÖ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            if offers:
                write_to_file(f"–í—Å–µ {len(offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã —Ä–∞–Ω–µ–µ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ ID
        save_seen_offers(current_offer_ids)
        
        write_to_file(f"\n---\n*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}*")
            
    except requests.RequestException as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}"
        write_to_file(error_msg)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"
        write_to_file(error_msg)

if __name__ == "__main__":
    main()