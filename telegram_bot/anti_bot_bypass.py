#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –±–æ—Ç–æ–≤ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Cian.ru
–†–µ–∞–ª–∏–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import requests
import random
import time
import json
from typing import Dict, List, Optional
import logging

logger = logging.getLogger(__name__)

class AntiBotBypass:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –±–æ—Ç–æ–≤"""
    
    def __init__(self):
        self.session = requests.Session()
        self.current_headers = {}
        self.cookies_initialized = False
        
    def get_realistic_headers(self) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞"""
        
        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ User-Agent –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        user_agents = [
            # Chrome Windows
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
            # Chrome Mac
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            # Firefox
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/121.0',
            # Safari
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.2 Safari/605.1.15',
        ]
        
        user_agent = random.choice(user_agents)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ User-Agent
        if 'Windows' in user_agent:
            platform = '"Windows"'
            sec_ch_ua_platform = '"Windows"'
        elif 'Macintosh' in user_agent:
            platform = '"macOS"'
            sec_ch_ua_platform = '"macOS"'
        else:
            platform = '"Linux"'
            sec_ch_ua_platform = '"Linux"'
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {
            'accept': 'application/json, text/plain, */*',
            'accept-language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'cache-control': 'no-cache',
            'content-type': 'application/json',
            'origin': 'https://perm.cian.ru',
            'pragma': 'no-cache',
            'referer': 'https://perm.cian.ru/rent/commercial/',
            'sec-ch-ua': f'"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': sec_ch_ua_platform,
            'sec-fetch-dest': 'empty',
            'sec-fetch-mode': 'cors',
            'sec-fetch-site': 'same-site',
            'user-agent': user_agent,
            'x-requested-with': 'XMLHttpRequest',
        }
        
        return headers
    
    def init_browser_session(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –±—Ä–∞—É–∑–µ—Ä"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—É—é —Å–µ—Å—Å–∏—é...")
            
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è cookies
            headers = self.get_realistic_headers()
            self.session.headers.update(headers)
            
            main_page_response = self.session.get(
                'https://perm.cian.ru/rent/commercial/',
                timeout=10
            )
            
            if main_page_response.status_code == 200:
                logger.info("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                time.sleep(random.uniform(1, 3))
                
                # –®–∞–≥ 2: –î–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cookies
                filters_response = self.session.get(
                    'https://perm.cian.ru/rent/commercial/?deal_type=rent&offer_type=offices',
                    timeout=10
                )
                
                if filters_response.status_code == 200:
                    logger.info("‚úÖ –§–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã, cookies –ø–æ–ª—É—á–µ–Ω—ã")
                    self.cookies_initialized = True
                    return True
                    
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    def get_alternative_endpoints(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö API endpoints"""
        return [
            'https://api.cian.ru/search-offers/v2/search-offers-desktop/',
            'https://api.cian.ru/v1/get-offers/',
            'https://api.cian.ru/commercial-search-offers/v1/offers/',
            'https://www.cian.ru/ajax/commercial/get-offers/',
        ]
    
    def get_alternative_params(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        return [
            # –§–æ—Ä–º–∞—Ç 1: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π
            {
                "deal_type": "rent",
                "offer_type": "offices",
                "region": 4927,
                "currency": 2
            },
            
            # –§–æ—Ä–º–∞—Ç 2: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–µ–±
            {
                "jsonQuery": {
                    "deal_type": "rent",
                    "offer_type": ["office", "free_appointment"],
                    "region": [4927],
                    "_type": "terms"
                }
            },
            
            # –§–æ—Ä–º–∞—Ç 3: –ú–æ–±–∏–ª—å–Ω—ã–π API
            {
                "deal_type": "2",
                "offer_type": "1,3", 
                "region": "4927",
                "engine_version": "2"
            }
        ]
    
    def make_stealth_request(self, url: str, data: Dict) -> Optional[requests.Response]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∫—Ä—ã—Ç—ã–π –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ö–æ–¥–æ–º –∑–∞—â–∏—Ç—ã"""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.cookies_initialized:
            if not self.init_browser_session():
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä–Ω—É—é —Å–µ—Å—Å–∏—é")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        new_headers = self.get_realistic_headers()
        self.session.headers.update(new_headers)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        delay = random.uniform(2, 8)
        logger.info(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º: {delay:.1f} —Å–µ–∫")
        time.sleep(delay)
        
        try:
            response = self.session.post(url, json=data, timeout=15)
            logger.info(f"–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω: {response.status_code}")
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def try_multiple_approaches(self) -> Optional[Dict]:
        """–ü—Ä–æ–±—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        
        endpoints = self.get_alternative_endpoints()
        param_sets = self.get_alternative_params()
        
        for i, endpoint in enumerate(endpoints):
            for j, params in enumerate(param_sets):
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {i+1}.{j+1}: {endpoint}")
                
                response = self.make_stealth_request(endpoint, params)
                
                if response and response.status_code == 200:
                    try:
                        data = response.json()
                        if data and 'data' in data:
                            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ!")
                            return data
                    except:
                        continue
                        
                elif response and response.status_code == 403:
                    logger.warning("403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥")
                    continue
                    
                elif response and response.status_code == 500:
                    logger.warning("500: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
                    continue
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                time.sleep(random.uniform(3, 7))
        
        logger.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        return None
    
    def get_working_data(self) -> Optional[Dict]:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã...")
        
        # –ü–æ–ø—ã—Ç–∫–∞ 1: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã
        data = self.try_multiple_approaches()
        if data:
            return data
            
        # –ü–æ–ø—ã—Ç–∫–∞ 2: –†–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
        logger.info("–†–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é...")
        self.cookies_initialized = False
        self.session = requests.Session()
        
        data = self.try_multiple_approaches()
        if data:
            return data
            
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ–π—Ç–∏ –∑–∞—â–∏—Ç—É")
        return None

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
bypass_system = AntiBotBypass() 