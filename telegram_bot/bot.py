import asyncio
import logging
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

from config import BOT_TOKEN, MAX_MESSAGE_LENGTH, SAFE_MODE_ENABLED
from parser import parser
from dataBD_manager import databd_manager
from safe_mode import safe_mode
# –ò—Å–ø–æ–ª—å–∑—É–µ–º databd_manager –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –ë–î
db_manager = databd_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class CianBot:
    """–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å Cian.ru"""
    
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("safety", self.safety_command))
        
        # Callback –∫–Ω–æ–ø–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î
        try:
            db_manager.save_user(
                user_id=str(user.id),
                first_name=user.first_name,
                last_name=user.last_name,
                username=user.username
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        
        welcome_text = (
            f"üè¢ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –∞—Ä–µ–Ω–¥—ã "
            "–æ—Ñ–∏—Å–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π –≤ –ü–µ—Ä–º–∏ —Å —Å–∞–π—Ç–∞ Cian.ru\n\n"
            "üìä *–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:*\n"
            "‚Ä¢ –ü–∞—Ä—Å–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ Excel –æ—Ç—á–µ—Ç—ã\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É\n\n"
            "üöÄ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*"
        )
        
        keyboard = self._get_main_keyboard()
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üÜò *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
            "üöÄ *Start* - –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å Cian.ru\n"
            "‚Ä¢ –ò—â–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n"
            "‚Ä¢ –°–æ–∑–¥–∞–µ—Ç Excel –æ—Ç—á–µ—Ç —Å —Ç—Ä–µ–º—è –ª–∏—Å—Ç–∞–º–∏\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö\n\n"
            "üîÑ *Update* - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—É—Å–∫–µ Start\n"
            "‚Ä¢ –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
            "‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
            "üìä *Excel –æ—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:*\n"
            "‚Ä¢ –õ–∏—Å—Ç '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            "‚Ä¢ –õ–∏—Å—Ç '–û–±—ä—è–≤–ª–µ–Ω–∏—è' - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞\n"
            "‚Ä¢ –õ–∏—Å—Ç '–°–≤–æ–¥–∫–∞ –ø–æ —Ü–µ–Ω–∞–º' - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
            "‚ùì *–í–æ–ø—Ä–æ—Å—ã?* –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        )
        
        keyboard = self._get_main_keyboard()
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        user_id = str(user.id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stats = db_manager.get_user_stats(user_id)
            db_stats = db_manager.get_database_stats()
            
            stats_text = (
                f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, {user.first_name}*\n\n"
                f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {user_stats.get('seen_count', 0)}\n"
                f"üïê –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä: {user_stats.get('first_seen', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                f"üïë –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä: {user_stats.get('last_seen', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n\n"
                f"üóÇÔ∏è *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:*\n"
                f"üè¢ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {db_stats.get('total_offers', 0)}\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db_stats.get('total_users', 0)}\n"
                f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {db_stats.get('avg_price', 0):,.0f} ‚ÇΩ/–º–µ—Å\n"
                f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {db_stats.get('last_update', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n\n"
                f"üí° *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
                f"/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                f"/help - –ü–æ–º–æ—â—å\n"
                f"/stats - –≠—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                f"/safety - –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º"
            )
            
            keyboard = self._get_main_keyboard()
            
            await update.message.reply_text(
                stats_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_id}: {e}")
            await update.message.reply_text(
                "‚ùå *–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=self._get_main_keyboard()
            )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        user_id = str(query.from_user.id)
        action = query.data
        
        await query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {action}")
        
        if action == "start_parsing":
            await self._handle_start_parsing(query, user_id)
        elif action == "update_parsing":
            await self._handle_update_parsing(query, user_id)
        elif action == "help":
            await self.help_command(update, context)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    async def _handle_start_parsing(self, query, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Start - –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            if SAFE_MODE_ENABLED:
                can_parse, safety_info = safe_mode.can_parse(user_id)
                
                if not can_parse:
                    # –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    await query.edit_message_text(
                        f"üõ°Ô∏è *–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω*\n\n"
                        f"üö´ {safety_info.get('message', '–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}\n\n"
                        f"‚è∞ *–û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å:*\n"
                        f"{safety_info.get('hours_left', 0)} —á. {safety_info.get('minutes_left', 0)} –º–∏–Ω.\n\n"
                        f"üìÖ *–°–ª–µ–¥—É—é—â–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω:*\n"
                        f"{safety_info.get('next_available', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                        f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {safety_info.get('total_today', 0)} –ø–∞—Ä—Å–∏–Ω–≥–æ–≤\n"
                        f"‚Ä¢ –í—Å–µ–≥–æ: {safety_info.get('total_all_time', 0)} –ø–∞—Ä—Å–∏–Ω–≥–æ–≤\n\n"
                        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /safety –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=self._get_main_keyboard()
                    )
                    return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã
            safety_status = "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ" if SAFE_MODE_ENABLED else "‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω"
            await query.edit_message_text(
                "üöÄ *–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...*\n\n"
                f"üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º: {safety_status}\n"
                "‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ Cian.ru\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ (–≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
            offers, stats = parser.parse_offers(user_id=user_id, only_new=False)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_text = self._format_results_text(stats, len(offers), "–ø–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self._send_results(query, result_text, offers)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await query.edit_message_text(
                f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ*\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=self._get_main_keyboard()
            )
    
    async def _handle_update_parsing(self, query, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Update - —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            if SAFE_MODE_ENABLED:
                can_parse, safety_info = safe_mode.can_parse(user_id)
                
                if not can_parse:
                    # –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    await query.edit_message_text(
                        f"üõ°Ô∏è *–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω*\n\n"
                        f"üö´ {safety_info.get('message', '–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}\n\n"
                        f"‚è∞ *–û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å:*\n"
                        f"{safety_info.get('hours_left', 0)} —á. {safety_info.get('minutes_left', 0)} –º–∏–Ω.\n\n"
                        f"üìÖ *–°–ª–µ–¥—É—é—â–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω:*\n"
                        f"{safety_info.get('next_available', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /safety –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=self._get_main_keyboard()
                    )
                    return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã
            safety_status = "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ" if SAFE_MODE_ENABLED else "‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω"
            await query.edit_message_text(
                "üîÑ *–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π...*\n\n"
                f"üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º: {safety_status}\n"
                "‚è≥ –ò—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ —Ä–∞–Ω–µ–µ\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ)
            offers, stats = parser.parse_offers(user_id=user_id, only_new=True)
            
            if offers:
                # –ï—Å—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - —Å–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
                result_text = self._format_results_text(stats, len(offers), "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                await self._send_results(query, result_text, offers)
            else:
                # –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç
                result_text = (
                    "‚úÖ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ*\n\n"
                    f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['total_count']}\n"
                    f"üÜï –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: 0\n"
                    f"üëÅ –£–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö: {stats['seen_count']}\n\n"
                    f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {stats['search_time']}\n\n"
                    "üí° –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã —Ä–∞–Ω–µ–µ.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É Update –ø–æ–∑–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π."
                )
                
                await query.edit_message_text(
                    result_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=self._get_main_keyboard()
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await query.edit_message_text(
                f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏*\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=self._get_main_keyboard()
            )
    
    def _format_results_text(self, stats: dict, offers_count: int, operation_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        return (
            f"‚úÖ *{operation_type.title()} –∑–∞–≤–µ—Ä—à–µ–Ω*\n\n"
            f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['total_count']}\n"
            f"üÜï –ü–æ–∫–∞–∑–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {offers_count}\n"
            f"üëÅ –£–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö: {stats['seen_count']}\n\n"
            f"üïê –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {stats['search_time']}\n"
            f"üìç –†–µ–≥–∏–æ–Ω: –ü–µ—Ä–º—å\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n\n"
            f"üìÑ Excel –æ—Ç—á–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Å–æ–æ–±—â–µ–Ω–∏—é"
        )
    
    async def _send_results(self, query, text: str, offers: list):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=self._get_main_keyboard()
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –ø–µ—Ä–≤–æ–≥–æ
            if offers and offers[0].get('photos'):
                try:
                    first_offer = offers[0]
                    photo_url = first_offer['photos'][0]
                    caption = (
                        f"üè¢ *–ü—Ä–µ–≤—å—é –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è*\n\n"
                        f"üí∞ {first_offer.get('price_text', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                        f"üìè {first_offer.get('area', '–ü–ª–æ—â–∞–¥—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                        f"üìç {first_offer.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}"
                    )
                    
                    await query.message.reply_photo(
                        photo=photo_url,
                        caption=caption,
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            await query.edit_message_text(
                "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self._get_main_keyboard()
            )
    
    def _get_main_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üöÄ Start", callback_data="start_parsing"),
                InlineKeyboardButton("üîÑ Update", callback_data="update_parsing")
            ],
            [
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def safety_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        user = update.effective_user
        user_id = str(user.id)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º
            if not SAFE_MODE_ENABLED:
                safety_text = (
                    f"‚ö†Ô∏è *–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω*\n\n"
                    f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.first_name}\n"
                    f"üìä *–°—Ç–∞—Ç—É—Å:* ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
                    f"üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
                    f"–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n"
                    f"–ü–∞—Ä—Å–∏–Ω–≥ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n\n"
                    f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞:*\n"
                    f"–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏—Ç–µ `SAFE_MODE_ENABLED = True` –≤ config.py\n\n"
                    f"üíº *–ö–æ–º–∞–Ω–¥—ã:*\n"
                    f"/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                    f"/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
                )
                
                keyboard = self._get_main_keyboard()
                
                await update.message.reply_text(
                    safety_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            safety_stats = safe_mode.get_user_safety_stats(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–µ–π—á–∞—Å –ø–∞—Ä—Å–∏—Ç—å
            can_parse, status_info = safe_mode.can_parse(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            status_emoji = "‚úÖ" if can_parse else "üö´"
            status_text = "–î–æ—Å—Ç—É–ø–µ–Ω" if can_parse else "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            
            safety_text = (
                f"üõ°Ô∏è *–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞*\n\n"
                f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.first_name}\n"
                f"üìä *–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞:* {status_emoji} {status_text}\n\n"
                f"üìà *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                f"üóìÔ∏è –ü–∞—Ä—Å–∏–Ω–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {safety_stats.get('today_count', 0)}\n"
                f"üìä –í—Å–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–æ–≤: {safety_stats.get('total_count', 0)}\n"
                f"üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥: {safety_stats.get('last_parsing', '–ù–∏–∫–æ–≥–¥–∞')}\n\n"
                f"‚è∞ *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n"
                f"üîí –ò–Ω—Ç–µ—Ä–≤–∞–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {safety_stats.get('safety_interval', '24 —á–∞—Å–∞')}\n"
                f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω: {safety_stats.get('next_available', '–°–µ–π—á–∞—Å')}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if not can_parse:
                safety_text += (
                    f"üö´ *–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:*\n"
                    f"{status_info.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')}\n\n"
                    f"‚è∞ *–û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å:*\n"
                    f"{status_info.get('hours_left', 0)} —á. {status_info.get('minutes_left', 0)} –º–∏–Ω.\n\n"
                )
            else:
                safety_text += (
                    f"‚úÖ *–ü–∞—Ä—Å–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω!*\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n"
                )
            
            safety_text += (
                f"üí° *–û –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ:*\n"
                f"–°–∏—Å—Ç–µ–º–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–∏–º —Ä–∞–∑–æ–º –≤ —Å—É—Ç–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è "
                f"–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Å–∞–π—Ç–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n\n"
                f"üíº *–ö–æ–º–∞–Ω–¥—ã:*\n"
                f"/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                f"/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                f"/safety - –≠—Ç–æ—Ç —ç–∫—Ä–∞–Ω"
            )
            
            keyboard = self._get_main_keyboard()
            
            await update.message.reply_text(
                safety_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è {user_id}: {e}")
            await update.message.reply_text(
                "‚ùå *–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞*\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
                f"–û—à–∏–±–∫–∞: {str(e)}",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=self._get_main_keyboard()
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Cian Parser Bot...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = CianBot()
    bot.run()

if __name__ == "__main__":
    main() 