#!/usr/bin/env python3
"""
–ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –±–æ—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Selenium –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import time
import random
import json
from typing import Dict, List, Optional
import logging

logger = logging.getLogger(__name__)

try:
    from selenium import webdriver
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.common.action_chains import ActionChains
    SELENIUM_AVAILABLE = True
except ImportError:
    SELENIUM_AVAILABLE = False
    logger.warning("Selenium –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install selenium")

class BrowserBypass:
    """–û–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä"""
    
    def __init__(self):
        self.driver = None
        self.initialized = False
    
    def setup_driver(self) -> bool:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Chrome –¥—Ä–∞–π–≤–µ—Ä —Å –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π"""
        if not SELENIUM_AVAILABLE:
            return False
            
        try:
            chrome_options = Options()
            
            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
            chrome_options.add_argument('--no-sandbox')
            chrome_options.add_argument('--disable-dev-shm-usage')
            chrome_options.add_argument('--disable-blink-features=AutomationControlled')
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            
            # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π User-Agent
            user_agents = [
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            ]
            chrome_options.add_argument(f'--user-agent={random.choice(user_agents)}')
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
            chrome_options.add_argument('--disable-extensions')
            chrome_options.add_argument('--disable-plugins-discovery')
            chrome_options.add_argument('--disable-web-security')
            chrome_options.add_argument('--allow-running-insecure-content')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            self.driver = webdriver.Chrome(options=chrome_options)
            
            # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            self.initialized = True
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def human_like_behavior(self):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞"""
        # –°–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
        try:
            action = ActionChains(self.driver)
            # –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            x = random.randint(100, 800)
            y = random.randint(100, 600)
            action.move_by_offset(x, y).perform()
            
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            time.sleep(random.uniform(0.5, 2.0))
            
            # –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –∫–ª–∏–∫ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –º–µ—Å—Ç–µ
            if random.random() < 0.3:
                action.click().perform()
                time.sleep(random.uniform(0.2, 1.0))
                
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è: {e}")
    
    def get_cian_data_with_browser(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
        if not self.initialized:
            if not self.setup_driver():
                return None
        
        try:
            logger.info("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Cian —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä...")
            
            # –®–∞–≥ 1: –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get('https://perm.cian.ru/')
            time.sleep(random.uniform(2, 4))
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            self.human_like_behavior()
            
            # –®–∞–≥ 2: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            self.driver.get('https://perm.cian.ru/rent/commercial/')
            time.sleep(random.uniform(3, 6))
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
            self.driver.execute_script("window.scrollTo(0, 500);")
            time.sleep(random.uniform(1, 2))
            
            # –®–∞–≥ 3: –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å AJAX –∑–∞–ø—Ä–æ—Å
            logger.info("üîç –ò—â–µ–º AJAX –∑–∞–ø—Ä–æ—Å—ã...")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            wait = WebDriverWait(self.driver, 10)
            
            # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            logs = self.driver.get_log('performance')
            api_data = None
            
            for log in logs:
                message = json.loads(log['message'])
                if message['message']['method'] == 'Network.responseReceived':
                    url = message['message']['params']['response']['url']
                    if 'api.cian.ru' in url and 'offers' in url:
                        logger.info(f"üì° –ù–∞–π–¥–µ–Ω API –∑–∞–ø—Ä–æ—Å: {url}")
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø—Ä—è–º–æ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            logger.info("üìÑ –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            
            # –ò—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            offers_elements = self.driver.find_elements(By.CSS_SELECTOR, '[data-name="CardComponent"]')
            
            if offers_elements:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(offers_elements)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return self._parse_page_offers(offers_elements)
            else:
                logger.warning("–û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return None
        finally:
            self._cleanup()
    
    def _parse_page_offers(self, elements) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        offers = []
        
        for i, element in enumerate(elements[:10]):  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                offer_data = {
                    'id': f'browser_{i+1}_{int(time.time())}',
                    'title': '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
                    'price': '–¶–µ–Ω–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è',
                    'area': '–ü–ª–æ—â–∞–¥—å —É—Ç–æ—á–Ω—è–µ—Ç—Å—è',
                    'address': '–ü–µ—Ä–º—å',
                    'source': 'browser_parsing'
                }
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                try:
                    price_elem = element.find_element(By.CSS_SELECTOR, '[data-testid="price"]')
                    if price_elem:
                        offer_data['price'] = price_elem.text
                except:
                    pass
                
                try:
                    address_elem = element.find_element(By.CSS_SELECTOR, '[data-name="AddressComponent"]')
                    if address_elem:
                        offer_data['address'] = address_elem.text
                except:
                    pass
                
                offers.append(offer_data)
                
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {i}: {e}")
                continue
        
        return {
            'data': {
                'offers': offers
            },
            'source': 'browser',
            'count': len(offers)
        }
    
    def _cleanup(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        if self.driver:
            try:
                self.driver.quit()
                logger.info("üö´ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except:
                pass
            finally:
                self.driver = None
                self.initialized = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_browser_bypass():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –æ–±—Ö–æ–¥"""
    if not SELENIUM_AVAILABLE:
        print("‚ùå Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    bypass = BrowserBypass()
    data = bypass.get_cian_data_with_browser()
    
    if data:
        print(f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {data.get('count', 0)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        return True
    else:
        print("‚ùå –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è")
        return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
browser_bypass = BrowserBypass() if SELENIUM_AVAILABLE else None 