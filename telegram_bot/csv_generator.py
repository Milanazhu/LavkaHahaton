import csv
import os
from datetime import datetime, timedelta
from typing import List, Dict
from config import DATA_DIR, EXCEL_OUTPUT_DIR
import logging

logger = logging.getLogger(__name__)

class CSVGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º"""
    
    def __init__(self):
        self.ensure_output_dir()
    
    def ensure_output_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        os.makedirs(EXCEL_OUTPUT_DIR, exist_ok=True)
    
    def generate_report(self, offers: List[Dict], stats: Dict, user_id: str = "default") -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º
        
        Args:
            offers: –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"cian_report_{user_id}_{timestamp}.txt"
            filepath = os.path.join(EXCEL_OUTPUT_DIR, filename)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞
            current_date = datetime.now()
            start_date = current_date - timedelta(days=30)
            period_text = f"{start_date.strftime('%d.%m.%Y')} - {current_date.strftime('%d.%m.%Y')}"
            
            with open(filepath, 'w', encoding='utf-8') as f:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
                f.write("–û–¢–ß–ï–¢ CIAN.RU\n")
                f.write(f"{stats.get('search_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
                f.write(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats.get('total_count', 0)}\n")
                f.write(f"–ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats.get('new_count', 0)}\n")
                f.write(f"–£–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö: {stats.get('seen_count', 0)}\n")
                f.write(f"–†–µ–≥–∏–æ–Ω: –ü–µ—Ä–º—å\n")
                f.write(f"–ü–µ—Ä–∏–æ–¥: {period_text}\n")
                f.write("\n" + "="*60 + "\n\n")
                
                if offers:
                    # –û–±—ä—è–≤–ª–µ–Ω–∏—è
                    for i, offer in enumerate(offers, 1):
                        f.write(f"üìã –û–ë–™–Ø–í–õ–ï–ù–ò–ï {i}\n")
                        f.write("-" * 40 + "\n")
                        f.write(f"üÜî ID: {offer.get('id', '')}\n")
                        f.write(f"üí∞ –¶–µ–Ω–∞: {offer.get('price_text', '')}\n")
                        f.write(f"üìè –ü–ª–æ—â–∞–¥—å: {offer.get('area', '')}\n")
                        
                        # –û–±—Ä–µ–∑–∞–µ–º –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                        address = offer.get('address', '')
                        if len(address) > 80:
                            address = address[:80] + "..."
                        f.write(f"üìç –ê–¥—Ä–µ—Å: {address}\n")
                        
                        # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ  
                        types = offer.get('types', '')
                        if len(types) > 60:
                            types = types[:60] + "..."
                        f.write(f"üè™ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {types}\n")
                        
                        f.write(f"üîó –°—Å—ã–ª–∫–∞: {offer.get('url', '')}\n")
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        f.write(f"üè¢ –≠—Ç–∞–∂: {offer.get('floor_info', '')}\n")
                        f.write(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {', '.join(offer.get('phones', []))}\n")
                        f.write(f"üïí –î–æ–±–∞–≤–ª–µ–Ω–æ: {offer.get('added_time', '')}\n")
                        
                        # –û–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)
                        description = offer.get('description', '')
                        if description:
                            if len(description) > 200:
                                description = description[:200] + "..."
                            f.write(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n")
                        
                        f.write("\n" + "="*60 + "\n\n")
                else:
                    f.write("‚ùå –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n")
                    f.write("–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã —Ä–∞–Ω–µ–µ.\n\n")
                
                # –ü–æ–¥–ø–∏—Å—å
                f.write(f"–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n")
                f.write("–ò—Å—Ç–æ—á–Ω–∏–∫: Cian.ru\n")
            
            logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {filepath}")
            return filepath
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç: {e}")
    
    def cleanup_old_reports(self, user_id: str = "default", keep_last: int = 5):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pattern = f"cian_report_{user_id}_"
            files = []
            
            for filename in os.listdir(EXCEL_OUTPUT_DIR):
                if filename.startswith(pattern) and (filename.endswith('.txt') or filename.endswith('.csv') or filename.endswith('.xlsx')):
                    filepath = os.path.join(EXCEL_OUTPUT_DIR, filename)
                    files.append((filepath, os.path.getctime(filepath)))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
            files.sort(key=lambda x: x[1], reverse=True)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
            for filepath, _ in files[keep_last:]:
                try:
                    os.remove(filepath)
                    logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –æ—Ç—á–µ—Ç: {filepath}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
csv_generator = CSVGenerator() 