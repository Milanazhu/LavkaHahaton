#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cian_reports.db
"""

import sqlite3
import os
from typing import List, Dict, Optional
import logging

logger = logging.getLogger(__name__)

class DatabaseViewer:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self, db_path: str = "dataBD/cian_reports.db"):
        self.db_path = db_path
    
    def get_all_listings(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –ë–î"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–º–µ–Ω–∏ –∫–æ–ª–æ–Ω–∫–∏
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT * FROM cian_reports 
                    ORDER BY created_at DESC 
                    LIMIT ?
                """, (limit,))
                
                rows = cursor.fetchall()
                return [dict(row) for row in rows]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
            return []
    
    def get_price_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–µ–Ω–∞–º"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT 
                        COUNT(*) as total_count,
                        AVG(price) as avg_price,
                        MIN(price) as min_price,
                        MAX(price) as max_price,
                        COUNT(CASE WHEN price < 50000 THEN 1 END) as under_50k,
                        COUNT(CASE WHEN price BETWEEN 50000 AND 100000 THEN 1 END) as 50k_100k,
                        COUNT(CASE WHEN price > 100000 THEN 1 END) as over_100k
                    FROM cian_reports 
                    WHERE price > 0
                """)
                
                row = cursor.fetchone()
                if row:
                    return {
                        'total_count': row[0],
                        'avg_price': round(row[1], 2) if row[1] else 0,
                        'min_price': row[2] or 0,
                        'max_price': row[3] or 0,
                        'under_50k': row[4],
                        '50k_100k': row[5], 
                        'over_100k': row[6]
                    }
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω: {e}")
            
        return {}
    
    def search_by_price_range(self, min_price: int, max_price: int) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É —Ü–µ–Ω"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT * FROM cian_reports 
                    WHERE price BETWEEN ? AND ?
                    ORDER BY price ASC
                """, (min_price, max_price))
                
                rows = cursor.fetchall()
                return [dict(row) for row in rows]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ü–µ–Ω–∞–º: {e}")
            return []
    
    def search_by_address(self, address_part: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —á–∞—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT * FROM cian_reports 
                    WHERE address LIKE ?
                    ORDER BY price ASC
                """, (f'%{address_part}%',))
                
                rows = cursor.fetchall()
                return [dict(row) for row in rows]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É: {e}")
            return []
    
    def get_formatted_listing(self, listing: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        try:
            price_text = f"{listing['price']:,.0f} ‚ÇΩ/–º–µ—Å".replace(',', ' ')
            
            formatted = f"""
üè¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{listing['id']}
üí∞ –¶–µ–Ω–∞: {price_text}
üìè –ü–ª–æ—â–∞–¥—å: {listing['area']}
üìç –ê–¥—Ä–µ—Å: {listing['address']}
üèóÔ∏è –≠—Ç–∞–∂: {listing['floor']}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {listing['seller']}
üîó –°—Å—ã–ª–∫–∞: {listing['url']}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {listing['description']}
üìÖ –°—Ç–∞—Ç—É—Å: {listing['status']}
"""
            return formatted.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {listing.get('id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
    
    def export_to_txt(self, filename: str = "dataBD/cian_report_export.txt") -> bool:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        try:
            listings = self.get_all_listings(limit=1000)
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("=" * 80 + "\n")
                f.write("           –û–¢–ß–ï–¢ –ü–û –û–ë–™–Ø–í–õ–ï–ù–ò–Ø–ú –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò\n")
                f.write("=" * 80 + "\n\n")
                
                stats = self.get_price_statistics()
                f.write(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
                f.write(f"   –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats.get('total_count', 0)}\n")
                f.write(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats.get('avg_price', 0):,.0f} ‚ÇΩ/–º–µ—Å\n")
                f.write(f"   –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {stats.get('min_price', 0):,.0f} - {stats.get('max_price', 0):,.0f} ‚ÇΩ/–º–µ—Å\n")
                f.write(f"   –î–æ 50,000 ‚ÇΩ: {stats.get('under_50k', 0)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n")
                f.write(f"   50,000-100,000 ‚ÇΩ: {stats.get('50k_100k', 0)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n")
                f.write(f"   –°–≤—ã—à–µ 100,000 ‚ÇΩ: {stats.get('over_100k', 0)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n")
                
                f.write("=" * 80 + "\n")
                f.write("                    –°–ü–ò–°–û–ö –û–ë–™–Ø–í–õ–ï–ù–ò–ô\n")
                f.write("=" * 80 + "\n\n")
                
                for i, listing in enumerate(listings, 1):
                    f.write(f"[{i}] {self.get_formatted_listing(listing)}\n")
                    f.write("-" * 50 + "\n\n")
            
            logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {filename}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return False
    
    def generate_summary_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –ë–î"""
        try:
            stats = self.get_price_statistics()
            listings = self.get_all_listings(limit=5)
            
            report = f"""
üìä –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ –ü–û –ë–ê–ó–ï –î–ê–ù–ù–´–•

üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {os.path.basename(self.db_path)}
üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(self.db_path) / 1024:.1f} KB

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
   ‚Ä¢ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats.get('total_count', 0)}
   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats.get('avg_price', 0):,.0f} ‚ÇΩ/–º–µ—Å
   ‚Ä¢ –°–∞–º–æ–µ –¥–µ—à–µ–≤–æ–µ: {stats.get('min_price', 0):,.0f} ‚ÇΩ/–º–µ—Å
   ‚Ä¢ –°–∞–º–æ–µ –¥–æ—Ä–æ–≥–æ–µ: {stats.get('max_price', 0):,.0f} ‚ÇΩ/–º–µ—Å

üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–∞–º:
   ‚Ä¢ –î–æ 50,000 ‚ÇΩ: {stats.get('under_50k', 0)} ({stats.get('under_50k', 0) / max(stats.get('total_count', 1), 1) * 100:.1f}%)
   ‚Ä¢ 50,000-100,000 ‚ÇΩ: {stats.get('50k_100k', 0)} ({stats.get('50k_100k', 0) / max(stats.get('total_count', 1), 1) * 100:.1f}%)
   ‚Ä¢ –°–≤—ã—à–µ 100,000 ‚ÇΩ: {stats.get('over_100k', 0)} ({stats.get('over_100k', 0) / max(stats.get('total_count', 1), 1) * 100:.1f}%)

üè¢ –ü—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π:
"""
            
            for listing in listings[:3]:
                price = f"{listing['price']:,.0f} ‚ÇΩ".replace(',', ' ')
                report += f"   ‚Ä¢ {price} - {listing['area']} - {listing['address']}\n"
            
            return report.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def view_all_listings(limit: int = 10):
    """–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    viewer = DatabaseViewer()
    listings = viewer.get_all_listings(limit)
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
    print("=" * 80)
    
    for i, listing in enumerate(listings, 1):
        print(f"[{i}] {viewer.get_formatted_listing(listing)}")
        print("-" * 50)

def search_by_price(min_price: int, max_price: int):
    """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ"""
    viewer = DatabaseViewer()
    listings = viewer.search_by_price_range(min_price, max_price)
    
    print(f"üí∞ –ù–∞–π–¥–µ–Ω–æ {len(listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {min_price:,} - {max_price:,} ‚ÇΩ:")
    print("=" * 80)
    
    for listing in listings:
        print(viewer.get_formatted_listing(listing))
        print("-" * 50)

def show_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î"""
    viewer = DatabaseViewer()
    print(viewer.generate_summary_report())

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
db_viewer = DatabaseViewer() 