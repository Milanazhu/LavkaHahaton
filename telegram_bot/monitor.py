#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, –æ—à–∏–±–∫–∏ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–ª—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
"""

import logging
import os
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from config import DATA_DIR

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FILE = f"{DATA_DIR}/parser_activity.log"
STATS_FILE = f"{DATA_DIR}/monitor_stats.json"

class ParserMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    
    def __init__(self):
        self.ensure_data_dir()
        self.setup_logging()
        self.stats = self.load_stats()
    
    def ensure_data_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        os.makedirs(DATA_DIR, exist_ok=True)
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞
        self.logger = logging.getLogger('parser_monitor')
        self.logger.setLevel(logging.INFO)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if not self.logger.handlers:
            # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            file_handler = logging.FileHandler(LOG_FILE, encoding='utf-8')
            file_handler.setLevel(logging.INFO)
            
            # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
            formatter = logging.Formatter(
                '%(asctime)s - %(levelname)s - %(message)s',
                datefmt='%Y-%m-%d %H:%M:%S'
            )
            file_handler.setFormatter(formatter)
            
            self.logger.addHandler(file_handler)
    
    def load_stats(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(STATS_FILE):
                with open(STATS_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        return {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'last_request_time': None,
            'daily_requests': {},
            'error_history': [],
            'user_activity': {}
        }
    
    def save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
        try:
            with open(STATS_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.stats, f, ensure_ascii=False, indent=2)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def log_request(self, user_id: str, status: str, offers_count: int = 0, 
                   error_msg: str = None, ip_info: str = None):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            status: –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ (success/error)
            offers_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            error_msg: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            ip_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        """
        timestamp = datetime.now()
        date_key = timestamp.strftime('%Y-%m-%d')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats['total_requests'] += 1
        self.stats['last_request_time'] = timestamp.isoformat()
        
        if status == 'success':
            self.stats['successful_requests'] += 1
        else:
            self.stats['failed_requests'] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            error_info = {
                'timestamp': timestamp.isoformat(),
                'user_id': user_id,
                'error': error_msg,
                'ip_info': ip_info
            }
            self.stats['error_history'].append(error_info)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –æ—à–∏–±–æ–∫
            if len(self.stats['error_history']) > 50:
                self.stats['error_history'] = self.stats['error_history'][-50:]
        
        # –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if date_key not in self.stats['daily_requests']:
            self.stats['daily_requests'][date_key] = {
                'total': 0,
                'success': 0,
                'errors': 0,
                'users': set()
            }
        
        daily = self.stats['daily_requests'][date_key]
        daily['total'] += 1
        daily['users'].add(user_id)
        
        if status == 'success':
            daily['success'] += 1
        else:
            daily['errors'] += 1
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º set –≤ list –¥–ª—è JSON
        daily['users'] = list(daily['users'])
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user_id not in self.stats['user_activity']:
            self.stats['user_activity'][user_id] = {
                'total_requests': 0,
                'last_request': None,
                'offers_received': 0
            }
        
        user_stats = self.stats['user_activity'][user_id]
        user_stats['total_requests'] += 1
        user_stats['last_request'] = timestamp.isoformat()
        if offers_count > 0:
            user_stats['offers_received'] += offers_count
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
        log_msg = f"USER:{user_id} STATUS:{status} OFFERS:{offers_count}"
        if ip_info:
            log_msg += f" IP:{ip_info}"
        if error_msg:
            log_msg += f" ERROR:{error_msg}"
        
        if status == 'success':
            self.logger.info(log_msg)
        else:
            self.logger.error(log_msg)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.save_stats()
    
    def check_safety_limits(self, user_id: str) -> Dict[str, any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        Returns:
            Dict —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        """
        now = datetime.now()
        today = now.strftime('%Y-%m-%d')
        
        result = {
            'safe_to_proceed': True,
            'warnings': [],
            'recommendations': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        daily_stats = self.stats['daily_requests'].get(today, {'total': 0})
        if daily_stats['total'] >= 10:
            result['safe_to_proceed'] = False
            result['warnings'].append(f"–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {daily_stats['total']} –∑–∞–ø—Ä–æ—Å–æ–≤")
            result['recommendations'].append("–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –¥–æ –∑–∞–≤—Ç—Ä–∞")
        elif daily_stats['total'] >= 5:
            result['warnings'].append(f"–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –¥–Ω–µ–≤–Ω–æ–º—É –ª–∏–º–∏—Ç—É: {daily_stats['total']}/10")
            result['recommendations'].append("–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if self.stats['last_request_time']:
            last_request = datetime.fromisoformat(self.stats['last_request_time'])
            time_diff = now - last_request
            
            if time_diff < timedelta(hours=2):
                result['warnings'].append(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –±—ã–ª {time_diff} –Ω–∞–∑–∞–¥")
                result['recommendations'].append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–∏–Ω–∏–º—É–º 3 —á–∞—Å–∞")
            
            if time_diff < timedelta(hours=1):
                result['safe_to_proceed'] = False
                result['warnings'].append("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã!")
                result['recommendations'].append("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —á–∞—Å–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        recent_errors = [
            err for err in self.stats['error_history']
            if (now - datetime.fromisoformat(err['timestamp'])) < timedelta(hours=24)
        ]
        
        if len(recent_errors) >= 3:
            result['safe_to_proceed'] = False
            result['warnings'].append(f"–ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {len(recent_errors)}")
            result['recommendations'].append("–í–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP. –°–º–µ–Ω–∏—Ç–µ —Å–µ—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = self.stats['user_activity'].get(user_id)
        if user_stats and user_stats['last_request']:
            last_user_request = datetime.fromisoformat(user_stats['last_request'])
            user_time_diff = now - last_user_request
            
            if user_time_diff < timedelta(hours=3):
                result['recommendations'].append(f"–í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –±—ã–ª {user_time_diff} –Ω–∞–∑–∞–¥")
        
        return result
    
    def get_daily_report(self, days: int = 7) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π"""
        now = datetime.now()
        report_lines = ["üìä –û–¢–ß–ï–¢ –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–ê–†–°–ï–†–ê", "=" * 40]
        
        total_requests = 0
        total_errors = 0
        
        for i in range(days):
            date = (now - timedelta(days=i)).strftime('%Y-%m-%d')
            daily = self.stats['daily_requests'].get(date, {})
            
            if daily:
                requests_count = daily.get('total', 0)
                errors_count = daily.get('errors', 0)
                users_count = len(daily.get('users', []))
                
                total_requests += requests_count
                total_errors += errors_count
                
                status = "üî¥" if errors_count > 2 else "üü°" if requests_count > 5 else "üü¢"
                
                report_lines.append(
                    f"{status} {date}: {requests_count} –∑–∞–ø—Ä–æ—Å–æ–≤, "
                    f"{errors_count} –æ—à–∏–±–æ–∫, {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                )
            else:
                report_lines.append(f"‚ö™ {date}: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        report_lines.extend([
            "",
            f"üìà –ò—Ç–æ–≥–æ –∑–∞ {days} –¥–Ω–µ–π:",
            f"   –ó–∞–ø—Ä–æ—Å–æ–≤: {total_requests}",
            f"   –û—à–∏–±–æ–∫: {total_errors}",
            f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {((total_requests - total_errors) / max(total_requests, 1) * 100):.1f}%"
        ])
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
        if self.stats['error_history']:
            report_lines.extend(["", "üö® –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:"])
            for error in self.stats['error_history'][-3:]:
                timestamp = datetime.fromisoformat(error['timestamp']).strftime('%d.%m %H:%M')
                report_lines.append(f"   {timestamp}: {error.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        return "\n".join(report_lines)
    
    def cleanup_old_logs(self, days_to_keep: int = 30):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏"""
        cutoff_date = datetime.now() - timedelta(days=days_to_keep)
        cutoff_str = cutoff_date.strftime('%Y-%m-%d')
        
        # –û—á–∏—â–∞–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        old_dates = [
            date for date in self.stats['daily_requests'].keys()
            if date < cutoff_str
        ]
        
        for date in old_dates:
            del self.stats['daily_requests'][date]
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—à–∏–±–æ–∫
        self.stats['error_history'] = [
            error for error in self.stats['error_history']
            if datetime.fromisoformat(error['timestamp']) > cutoff_date
        ]
        
        self.save_stats()
        self.logger.info(f"–û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ {days_to_keep} –¥–Ω–µ–π")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
monitor = ParserMonitor()

def get_current_ip() -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π IP –∞–¥—Ä–µ—Å"""
    try:
        import requests
        response = requests.get('https://api.ipify.org', timeout=5)
        return response.text.strip()
    except:
        return None

if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    print("üîç –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    # –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    current_ip = get_current_ip()
    monitor.log_request("test_user", "success", 5, ip_info=current_ip)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    safety = monitor.check_safety_limits("test_user")
    print(f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ: {safety['safe_to_proceed']}")
    if safety['warnings']:
        print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:", safety['warnings'])
    if safety['recommendations']:
        print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", safety['recommendations'])
    
    # –û—Ç—á–µ—Ç
    print("\n" + monitor.get_daily_report()) 