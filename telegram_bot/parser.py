import requests
import json
import os
import time
import random
from datetime import datetime
from typing import List, Dict, Tuple, Set
from config import (
    CIAN_API_URL, HEADERS, DEFAULT_SEARCH_PARAMS, DATA_DIR, SEEN_OFFERS_FILE,
    USER_AGENTS, PROXY_LIST, DELAY_CONFIG, SECURITY_CONFIG
)
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CianParser:
    """–ü–∞—Ä—Å–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å Cian.ru —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    
    def __init__(self):
        self.ensure_data_dir()
        self.session = requests.Session()
        self._setup_session()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä
        try:
            from monitor import monitor, get_current_ip
            self.monitor = monitor
            self.get_current_ip = get_current_ip
            self.monitoring_enabled = True
        except ImportError:
            logger.warning("–ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            self.monitoring_enabled = False
    
    def _setup_session(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø—Ä–æ–∫—Å–∏ –∏ User-Agent"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
        if SECURITY_CONFIG['use_proxy_rotation'] and PROXY_LIST:
            proxy = random.choice(PROXY_LIST)
            self.session.proxies.update({
                'http': proxy,
                'https': proxy
            })
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: {proxy[:20]}...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        self.session.timeout = SECURITY_CONFIG['request_timeout']
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self._update_headers()
    
    def _update_headers(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π User-Agent"""
        headers = HEADERS.copy()
        
        if SECURITY_CONFIG['rotate_user_agent'] and USER_AGENTS:
            headers['user-agent'] = random.choice(USER_AGENTS)
            logger.debug(f"User-Agent: {headers['user-agent']}")
        
        self.session.headers.update(headers)
    
    def _apply_delay(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        if DELAY_CONFIG['enabled']:
            delay = random.uniform(DELAY_CONFIG['min_delay'], DELAY_CONFIG['max_delay'])
            logger.debug(f"–ó–∞–¥–µ—Ä–∂–∫–∞: {delay:.1f} —Å–µ–∫—É–Ω–¥")
            time.sleep(delay)
    
    def _check_safety_before_request(self, user_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞"""
        if not self.monitoring_enabled:
            return True
        
        safety = self.monitor.check_safety_limits(user_id)
        
        if not safety['safe_to_proceed']:
            warnings_text = "; ".join(safety['warnings'])
            recommendations_text = "; ".join(safety['recommendations'])
            raise Exception(
                f"üö´ –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
                f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {warnings_text}\n"
                f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendations_text}"
            )
        
        if safety['warnings']:
            for warning in safety['warnings']:
                logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {warning}")
        
        return True
    
    def ensure_data_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        os.makedirs(DATA_DIR, exist_ok=True)
    
    def load_seen_offers(self, user_id: str = "default") -> Set[int]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ID —É–∂–µ –≤–∏–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            file_path = f"{DATA_DIR}/seen_offers_{user_id}.json"
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    return set(json.load(f))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ seen_offers –¥–ª—è {user_id}: {e}")
        return set()
    
    def save_seen_offers(self, offer_ids: Set[int], user_id: str = "default"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            file_path = f"{DATA_DIR}/seen_offers_{user_id}.json"
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(list(offer_ids), f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è seen_offers –¥–ª—è {user_id}: {e}")
    
    def _make_request_with_retry(self, url: str, json_data: dict) -> requests.Response:
        """–î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        last_exception = None
        
        for attempt in range(SECURITY_CONFIG['max_retries']):
            try:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                if attempt > 0:
                    retry_delay = SECURITY_CONFIG['retry_delay'] + random.uniform(0, 5)
                    logger.info(f"–ü–æ–≤—Ç–æ—Ä {attempt + 1}, –æ–∂–∏–¥–∞–Ω–∏–µ {retry_delay:.1f} —Å–µ–∫...")
                    time.sleep(retry_delay)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
                    self._update_headers()
                
                self._apply_delay()
                
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Cian API...")
                response = self.session.post(url, json=json_data)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if response.status_code == 200:
                    logger.info("–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    return response
                elif response.status_code == 429:
                    logger.warning("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429), —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É...")
                    time.sleep(30)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è rate limit
                elif response.status_code == 403:
                    logger.warning("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403), –≤–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP")
                    time.sleep(60)  # –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                else:
                    logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                
                response.raise_for_status()
                
            except requests.exceptions.Timeout:
                last_exception = requests.RequestException("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
                logger.warning(f"–¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
            except requests.exceptions.ConnectionError:
                last_exception = requests.RequestException("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
            except requests.exceptions.RequestException as e:
                last_exception = e
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
        raise last_exception or requests.RequestException("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—É–¥–∞—á–Ω—ã")
    
    def parse_offers(self, user_id: str = "default", only_new: bool = True) -> Tuple[List[Dict], Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å Cian.ru
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            only_new: –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            
        Returns:
            Tuple[List[Dict], Dict]: (—Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        """
        current_ip = None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π IP –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if self.monitoring_enabled:
                current_ip = self.get_current_ip()
                logger.info(f"–¢–µ–∫—É—â–∏–π IP: {current_ip}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            self._check_safety_before_request(user_id)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –≤–∏–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            seen_offers = self.load_seen_offers(user_id) if only_new else set()
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(seen_offers)} —Ä–∞–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è {user_id}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            json_data = {'jsonQuery': DEFAULT_SEARCH_PARAMS}
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
            response = self._make_request_with_retry(CIAN_API_URL, json_data)
            data = response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            offers = data.get('data', {}).get('suggestOffersSerializedList', [])
            if not offers:
                offers = data.get('data', {}).get('offersSerialized', [])
            
            total_count = data.get('data', {}).get('offerCount', 0)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ {total_count} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            new_offers = []
            current_offer_ids = set()
            
            for offer in offers:
                offer_id = offer.get('id')
                if offer_id:
                    current_offer_ids.add(offer_id)
                    if not only_new or offer_id not in seen_offers:
                        new_offers.append(self._process_offer(offer))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ ID
            if only_new:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ ID
                all_seen = seen_offers.union(current_offer_ids)
                self.save_seen_offers(all_seen, user_id)
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(all_seen)} ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è {user_id}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = {
                'total_count': total_count,
                'new_count': len(new_offers),
                'seen_count': len(offers) - len(new_offers) if only_new else 0,
                'search_time': datetime.now().strftime('%d.%m.%Y %H:%M:%S')
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            if self.monitoring_enabled:
                self.monitor.log_request(
                    user_id=user_id,
                    status='success',
                    offers_count=len(new_offers),
                    ip_info=current_ip
                )
            
            logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {user_id}: {len(new_offers)} –Ω–æ–≤—ã—Ö –∏–∑ {total_count}")
            
            return new_offers, stats
            
        except requests.RequestException as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Cian.ru: {e}"
            logger.error(error_msg)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            if self.monitoring_enabled:
                self.monitor.log_request(
                    user_id=user_id,
                    status='error',
                    error_msg=str(e),
                    ip_info=current_ip
                )
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
            if "429" in str(e):
                error_msg += "\nüí° –°–æ–≤–µ—Ç: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 —á–∞—Å–∞."
            elif "403" in str(e):
                error_msg += "\nüí° –°–æ–≤–µ—Ç: –í–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Å–µ—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN."
            elif "timeout" in str(e).lower():
                error_msg += "\nüí° –°–æ–≤–µ—Ç: –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
            
            raise Exception(error_msg)
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É
            if self.monitoring_enabled:
                self.monitor.log_request(
                    user_id=user_id,
                    status='error',
                    error_msg=str(e),
                    ip_info=current_ip
                )
            
            raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def get_safety_report(self, user_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.monitoring_enabled:
            return "üìä –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        safety = self.monitor.check_safety_limits(user_id)
        
        report = ["üõ°Ô∏è –û–¢–ß–ï–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò", "=" * 30]
        
        if safety['safe_to_proceed']:
            report.append("‚úÖ –ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã")
        else:
            report.append("üö´ –ó–∞–ø—Ä–æ—Å—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
        
        if safety['warnings']:
            report.append("\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in safety['warnings']:
                report.append(f"  ‚Ä¢ {warning}")
        
        if safety['recommendations']:
            report.append("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in safety['recommendations']:
                report.append(f"  ‚Ä¢ {rec}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        daily_report = self.monitor.get_daily_report(3)
        report.append(f"\n{daily_report}")
        
        return "\n".join(report)
    
    def _process_offer(self, offer: Dict) -> Dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∏–∑–≤–ª–µ–∫–∞—è –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è"""
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            offer_id = offer.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω')
            
            # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ (–Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã)
            area_numeric = 0
            area_text = offer.get('totalArea', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            if area_text and area_text != '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
                try:
                    area_numeric = float(area_text)
                except:
                    pass
            
            # –¶–µ–Ω–∞
            price_info = offer.get('bargainTerms', {})
            if price_info.get('price'):
                price = price_info['price']
                
                if price_info.get('priceType') == 'squareMeter' and area_numeric > 0:
                    # –¶–µ–Ω–∞ –∑–∞ –º¬≤ - —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ –ø–ª–æ—â–∞–¥—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Ü–µ–Ω—ã
                    total_monthly_price = price * area_numeric
                    price_text = f"{total_monthly_price:,.0f} ‚ÇΩ/–º–µ—Å."
                    price_per_month = total_monthly_price
                else:
                    # –¶–µ–Ω–∞ —É–∂–µ –æ–±—â–∞—è –∑–∞ –º–µ—Å—è—Ü
                    price_text = f"{price:,} ‚ÇΩ/–º–µ—Å."
                    price_per_month = price
            else:
                price_text = offer.get('formattedShortPrice', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                price_per_month = 0
            
            # –ü–ª–æ—â–∞–¥—å
            area = offer.get('totalArea', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            if area and area != '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
                area = f"{area} –º¬≤"
            
            # –ê–¥—Ä–µ—Å
            geo = offer.get('geo', {})
            address = geo.get('userInput', '–ù–µ —É–∫–∞–∑–∞–Ω')
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            coordinates = geo.get('coordinates', {})
            lat = coordinates.get('lat', 0)
            lng = coordinates.get('lng', 0)
            
            # –≠—Ç–∞–∂
            floor = offer.get('floorNumber', '–ù–µ —É–∫–∞–∑–∞–Ω')
            building = offer.get('building', {})
            floors_total = building.get('floorsCount', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            floor_info = f"{floor}/{floors_total}"
            
            # –¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è
            specialty = offer.get('specialty', {})
            specialties = specialty.get('specialties', [])
            types_ru = []
            for spec in specialties[:5]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–∏–ø–æ–≤
                if spec.get('rusName'):
                    types_ru.append(spec['rusName'])
            
            if types_ru:
                types_text = ', '.join(types_ru)
                if len(specialties) > 5:
                    types_text += f" –∏ –µ—â–µ {len(specialties) - 5}"
            else:
                types_text = "–°–≤–æ–±–æ–¥–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ"
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            description = offer.get('description', '')
            
            # –ö–æ–Ω—Ç–∞–∫—Ç—ã
            phones = offer.get('phones', [])
            phone_numbers = []
            for phone in phones:
                country_code = phone.get('countryCode', '7')
                number = phone.get('number', '')
                if number:
                    phone_numbers.append(f"+{country_code} {number}")
            
            # –°—Å—ã–ª–∫–∞
            full_url = offer.get('fullUrl', '')
            
            # –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            added_time = offer.get('humanizedTimedelta', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            
            # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photos = offer.get('photos', [])
            photo_urls = []
            for photo in photos[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–æ—Ç–æ
                if photo.get('fullUrl'):
                    photo_urls.append(photo['fullUrl'])
            
            return {
                'id': offer_id,
                'price_text': price_text,
                'price_per_month': price_per_month,
                'area': area,
                'area_numeric': area_numeric,
                'address': address,
                'coordinates': {'lat': lat, 'lng': lng},
                'floor_info': floor_info,
                'floor': floor,
                'floors_total': floors_total,
                'types': types_text,
                'description': description,
                'phones': phone_numbers,
                'url': full_url,
                'added_time': added_time,
                'photos': photo_urls,
                'raw_data': offer  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –Ω—É–∂–¥—ã
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {offer.get('id', 'unknown')}: {e}")
            return {
                'id': offer.get('id', '–û—à–∏–±–∫–∞'),
                'price_text': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                'error': str(e)
            }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
parser = CianParser() 