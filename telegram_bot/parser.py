import requests
import json
import os
import time
import random
from datetime import datetime
from typing import List, Dict, Tuple, Set
from config import (
    CIAN_API_URL, HEADERS, DEFAULT_SEARCH_PARAMS, DATA_DIR, SEEN_OFFERS_FILE,
    USER_AGENTS, PROXY_LIST, DELAY_CONFIG, SECURITY_CONFIG, SAFE_MODE_ENABLED
)
from dataBD_manager import databd_manager
# –ò—Å–ø–æ–ª—å–∑—É–µ–º databd_manager –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –ë–î
db_manager = databd_manager
from safe_mode import safe_mode
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
try:
    from anti_bot_bypass import bypass_system
    BYPASS_AVAILABLE = True
    logger.info("‚úÖ –ú–æ–¥—É–ª—å –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError:
    BYPASS_AVAILABLE = False
    logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

class CianParser:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å Cian.ru –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.ensure_data_dir()
        self.session = requests.Session()
        self._setup_session()
        self.last_safety_check = None  # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    def _setup_session(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø—Ä–æ–∫—Å–∏ –∏ User-Agent"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
        if SECURITY_CONFIG['use_proxy_rotation'] and PROXY_LIST:
            proxy = random.choice(PROXY_LIST)
            self.session.proxies.update({
                'http': proxy,
                'https': proxy
            })
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: {proxy[:20]}...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        self.session.timeout = SECURITY_CONFIG['request_timeout']
        
        # –†–æ—Ç–∞—Ü–∏—è User-Agent
        if SECURITY_CONFIG['rotate_user_agent']:
            user_agent = random.choice(USER_AGENTS)
            headers = HEADERS.copy()
            headers['user-agent'] = user_agent
            self.session.headers.update(headers)
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω User-Agent: {user_agent[:50]}...")
        else:
            self.session.headers.update(HEADERS)
    
    def _check_safety_before_request(self, user_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
        if not SAFE_MODE_ENABLED:
            logger.info(f"‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω - –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            self.last_safety_check = {'status': 'disabled', 'message': '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω'}
            return True
        
        logger.info(f"üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        can_parse, status_info = safe_mode.can_parse(user_id)
        
        if not can_parse:
            logger.warning(f"üö´ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {status_info.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')}")
            self.last_safety_check = status_info
            return False
        
        logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {status_info.get('message', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞')}")
        self.last_safety_check = status_info
        return True
    
    def ensure_data_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        os.makedirs(DATA_DIR, exist_ok=True)
    
    def load_seen_offers(self, user_id: str = "default") -> Set[int]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ID —É–∂–µ –≤–∏–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
        try:
            return db_manager.get_seen_offers(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ seen_offers –∏–∑ –ë–î: {e}")
            return set()
    
    def save_seen_offers(self, seen_offers: Set[int], user_id: str = "default"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –≤–∏–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ë–î"""
        try:
            db_manager.save_seen_offers(user_id, seen_offers)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è seen_offers –≤ –ë–î: {e}")
    
    def parse_offers(self, user_id: str = "default", only_new: bool = True, geo_filter: Dict = None) -> Tuple[List[Dict], Dict]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å Cian.ru
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            only_new: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            geo_filter: –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
            
        Returns:
            Tuple[List[Dict], Dict]: (—Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        """
        start_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        if not self._check_safety_before_request(user_id):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            safety_info = self.last_safety_check or {}
            
            error_message = safety_info.get('message', '–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            blocked_stats = {
                'error': 'safe_mode_blocked',
                'message': error_message,
                'status': safety_info.get('status', 'blocked'),
                'hours_left': safety_info.get('hours_left', 0),
                'minutes_left': safety_info.get('minutes_left', 0),
                'next_available': safety_info.get('next_available', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'last_parsing': safety_info.get('last_parsing', '–ù–∏–∫–æ–≥–¥–∞'),
                'total_today': safety_info.get('total_today', 0),
                'total_all_time': safety_info.get('total_all_time', 0),
                'safety_mode': True
            }
            
            logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è {user_id}: —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω {safety_info.get('next_available', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –∫–æ–≥–¥–∞')}")
            return [], blocked_stats
        
        parsing_success = False
        
        try:
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –≤–∏–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            seen_offers = self.load_seen_offers(user_id)
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –ë–î
            session_id = db_manager.start_parsing_session(user_id, 'cian')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            search_params = DEFAULT_SEARCH_PARAMS.copy()
            
            logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Cian API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–†–û–î–í–ò–ù–£–¢–´–ô –†–ï–ñ–ò–ú: –ü—Ä–æ–±—É–µ–º –æ–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã
            if BYPASS_AVAILABLE:
                logger.info("üõ°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã...")
                api_data = bypass_system.get_working_data()
                
                if api_data and 'data' in api_data:
                    logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ –æ–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã!")
                    raw_offers = api_data.get('data', {}).get('offers', [])
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(raw_offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –æ–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    processed_offers, new_offers = self._process_api_data(raw_offers, seen_offers, user_id)
                    
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Å–ø–µ—à–Ω–æ
                    self.save_seen_offers(seen_offers, user_id)
                    db_manager.finish_parsing_session(session_id, len(processed_offers), len(new_offers))
                    
                    offers_to_return = new_offers if only_new else processed_offers
                    search_time = time.time() - start_time
                    
                    stats = {
                        'total_count': len(processed_offers),
                        'new_count': len(new_offers),
                        'seen_count': len(processed_offers) - len(new_offers),
                        'search_time': f"{search_time:.1f} —Å–µ–∫",
                        'timestamp': datetime.now().strftime('%H:%M:%S'),
                        'bypass_mode': True
                    }
                    
                    logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {len(offers_to_return)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º
                    safe_mode.log_parsing(user_id, success=True)
                    if SAFE_MODE_ENABLED:
                        logger.info(f"üõ°Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ (–æ–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã) –∑–∞–ø–∏—Å–∞–Ω –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    else:
                        logger.info(f"‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ (–æ–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã) –∑–∞–≤–µ—Ä—à–µ–Ω (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    return offers_to_return, stats
                else:
                    logger.warning("–û–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥...")
            
            # –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –†–ï–ñ–ò–ú: –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = self.session.post(
                CIAN_API_URL,
                json=search_params,
                timeout=SECURITY_CONFIG['request_timeout']
            )
            
            if response.status_code != 200:
                error_msg = f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}"
                logger.error(error_msg)
                
                # –†–ï–ó–ï–†–í–ù–´–ô –†–ï–ñ–ò–ú: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                if response.status_code == 500:
                    logger.warning("API Cian –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (500), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    return self._get_demo_data(user_id, only_new)
                
                return [], {"error": error_msg}
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            data = response.json()
            raw_offers = data.get('data', {}).get('offers', [])
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(raw_offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ API")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            processed_offers = []
            new_offers = []
            
            for offer in raw_offers:
                try:
                    processed_offer = self._process_offer(offer)
                    processed_offers.append(processed_offer)
                    
                    offer_id = int(processed_offer.get('id', 0))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤–æ–µ –ª–∏ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                    if offer_id not in seen_offers:
                        new_offers.append(processed_offer)
                        seen_offers.add(offer_id)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                        db_data = self._prepare_for_databd(processed_offer)
                        db_manager.save_listing(db_data)
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ seen_offers
            self.save_seen_offers(seen_offers, user_id)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
            db_manager.finish_parsing_session(session_id, len(processed_offers), len(new_offers))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å
            offers_to_return = new_offers if only_new else processed_offers
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            search_time = time.time() - start_time
            stats = {
                'total_count': len(processed_offers),
                'new_count': len(new_offers),
                'seen_count': len(processed_offers) - len(new_offers),
                'search_time': f"{search_time:.1f} —Å–µ–∫",
                'timestamp': datetime.now().strftime('%H:%M:%S')
            }
            
            logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(offers_to_return)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º
            parsing_success = True
            safe_mode.log_parsing(user_id, success=True)
            if SAFE_MODE_ENABLED:
                logger.info(f"üõ°Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                logger.info(f"‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            return offers_to_return, stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return [], {"error": str(e)}
    
    def _process_offer(self, offer: Dict) -> Dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
        try:
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            offer_id = offer.get('id', 0)
            price = offer.get('bargainTerms', {}).get('priceRur', 0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ü–µ–Ω—ã
            if price > 0:
                price_text = f"{price:,} ‚ÇΩ/–º–µ—Å".replace(',', ' ')
            else:
                price_text = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # –ü–ª–æ—â–∞–¥—å
            area_data = offer.get('totalArea', {})
            area = f"{area_data.get('value', 0)} –º¬≤" if area_data.get('value') else "–ü–ª–æ—â–∞–¥—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # –ê–¥—Ä–µ—Å
            address_parts = []
            geo = offer.get('geo', {})
            if geo.get('userInput'):
                address_parts.append(geo['userInput'])
            address = ', '.join(address_parts) if address_parts else "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"
            
            # URL
            url = f"https://perm.cian.ru/rent/commercial/{offer_id}/"
            
            # –≠—Ç–∞–∂
            floor_number = offer.get('floorNumber', 0)
            floors_count = offer.get('building', {}).get('floorsCount', 0)
            floor_info = f"{floor_number}/{floors_count}" if floor_number and floors_count else "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            # –¢–µ–ª–µ—Ñ–æ–Ω—ã
            phones = []
            for phone in offer.get('phones', []):
                if phone.get('number'):
                    phones.append(phone['number'])
            
            # –¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è
            commercial_type = offer.get('category', {})
            types = commercial_type.get('name', '–°–≤–æ–±–æ–¥–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ') if commercial_type else '–°–≤–æ–±–æ–¥–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ'
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            description = offer.get('description', '')
            
            return {
                'id': offer_id,
                'price_text': price_text,
                'price_per_month': price,
                'area': area,
                'address': address,
                'url': url,
                'floor_info': floor_info,
                'phones': phones,
                'types': types,
                'description': description,
                'added_time': '–ù–µ–¥–∞–≤–Ω–æ'  # –£–ø—Ä–æ—â–µ–Ω–æ –¥–ª—è –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {offer.get('id', 'unknown')}: {e}")
            return {
                'id': offer.get('id', 0),
                'price_text': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
                'price_per_month': 0,
                'area': '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
                'address': '–ù–µ —É–∫–∞–∑–∞–Ω',
                'url': '',
                'floor_info': '–ù–µ —É–∫–∞–∑–∞–Ω',
                'phones': [],
                'types': '–ù–µ —É–∫–∞–∑–∞–Ω',
                'description': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}',
                'added_time': '–û—à–∏–±–∫–∞'
            }
    
    def _prepare_for_databd(self, processed_offer: Dict) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ dataBD"""
        try:
            return {
                'id': str(processed_offer.get('id', '')),
                'source': 'cian',
                'price': processed_offer.get('price_per_month', 0),
                'area': processed_offer.get('area', ''),
                'description': processed_offer.get('description', ''),
                'url': processed_offer.get('url', ''),
                'floor': processed_offer.get('floor_info', ''),
                'address': processed_offer.get('address', ''),
                'lat': '',  # –£–ø—Ä–æ—â–µ–Ω–æ –¥–ª—è –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
                'lng': '',  # –£–ø—Ä–æ—â–µ–Ω–æ –¥–ª—è –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
                'seller': ', '.join(processed_offer.get('phones', [])),
                'photos': [],  # –£–ø—Ä–æ—â–µ–Ω–æ –¥–ª—è –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
                'status': 'open',
                'visible': 1
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è dataBD: {e}")
            return {
                'id': str(processed_offer.get('id', 'error')),
                'source': 'cian',
                'price': 0,
                'area': '',
                'description': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}',
                'url': '',
                'floor': '',
                'address': '',
                'lat': '',
                'lng': '',
                'seller': '',
                'photos': [],
                'status': 'error',
                'visible': 0
            }
    
    def _get_demo_data(self, user_id: str, only_new: bool):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        demo_offers = [
            {
                'id': 1001,
                'price_text': '85 000 ‚ÇΩ/–º–µ—Å',
                'price_per_month': 85000,
                'area': '45 –º¬≤',
                'address': '–≥. –ü–µ—Ä–º—å, —É–ª. –õ–µ–Ω–∏–Ω–∞, 50',
                'url': 'https://perm.cian.ru/rent/commercial/1001/',
                'floor_info': '3/9',
                'phones': ['+7(342)123-45-67'],
                'types': '–û—Ñ–∏—Å',
                'description': '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - API Cian.ru –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'added_time': '–°–µ–≥–æ–¥–Ω—è'
            },
            {
                'id': 1002,
                'price_text': '120 000 ‚ÇΩ/–º–µ—Å',
                'price_per_month': 120000,
                'area': '78 –º¬≤',
                'address': '–≥. –ü–µ—Ä–º—å, —É–ª. –ú–∏—Ä–∞, 25',
                'url': 'https://perm.cian.ru/rent/commercial/1002/',
                'floor_info': '1/5',
                'phones': ['+7(342)987-65-43'],
                'types': '–¢–æ—Ä–≥–æ–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ',
                'description': '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #2 - API Cian.ru –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'added_time': '–í—á–µ—Ä–∞'
            }
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        for offer in demo_offers:
            try:
                db_data = self._prepare_for_databd(offer)
                db_manager.save_listing(db_data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = {
            'total_count': len(demo_offers),
            'new_count': len(demo_offers) if only_new else 0,
            'seen_count': 0 if only_new else len(demo_offers),
            'search_time': '0.5 —Å–µ–∫',
            'timestamp': datetime.now().strftime('%H:%M:%S'),
            'demo_mode': True
        }
        
        offers_to_return = demo_offers if only_new else demo_offers
        
        logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(offers_to_return)} –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–º–æ-–ø–∞—Ä—Å–∏–Ω–≥ –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º (–∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π)
        safe_mode.log_parsing(user_id, success=True)
        if SAFE_MODE_ENABLED:
            logger.info(f"üõ°Ô∏è –î–µ–º–æ-–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            logger.info(f"‚ö†Ô∏è –î–µ–º–æ-–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return offers_to_return, stats
    
    def _process_api_data(self, raw_offers: List[Dict], seen_offers: Set[int], user_id: str) -> Tuple[List[Dict], List[Dict]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç API"""
        processed_offers = []
        new_offers = []
        
        for offer in raw_offers:
            try:
                processed_offer = self._process_offer(offer)
                processed_offers.append(processed_offer)
                
                offer_id = int(processed_offer.get('id', 0))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤–æ–µ –ª–∏ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                if offer_id not in seen_offers:
                    new_offers.append(processed_offer)
                    seen_offers.add(offer_id)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    db_data = self._prepare_for_databd(processed_offer)
                    db_manager.save_listing(db_data)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
                continue
        
        return processed_offers, new_offers
    
    def get_safety_report(self, user_id: str) -> str:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        return "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)"
    
    def get_monitoring_report(self, days: int = 3) -> str:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        return f"üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –ë–î (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)"

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
parser = CianParser() 