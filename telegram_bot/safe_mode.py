#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–∏–º —Ä–∞–∑–æ–º –≤ —Å—É—Ç–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
"""

import sqlite3
import json
from datetime import datetime, timedelta
from typing import Dict, Tuple, Optional
import logging
from config import SAFE_MODE_ENABLED

logger = logging.getLogger(__name__)

class SafeMode:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    def __init__(self, db_path: str = "dataBD/real_estate_data.db"):
        self.db_path = db_path
        self.safety_interval_hours = 24  # 24 —á–∞—Å–∞ –º–µ–∂–¥—É –ø–∞—Ä—Å–∏–Ω–≥–∞–º–∏
        self.enabled = SAFE_MODE_ENABLED  # –£–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ñ–ª–∞–≥–æ–º –≤ config.py
        if self.enabled:
            self.init_safety_table()
            logger.info("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
        else:
            logger.info("‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω")
    
    def init_safety_table(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS safety_log (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id TEXT NOT NULL,
                        last_parsing_time TIMESTAMP,
                        parsing_count_today INTEGER DEFAULT 0,
                        total_parsing_count INTEGER DEFAULT 0,
                        last_reset_date TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                cursor.execute("""
                    CREATE INDEX IF NOT EXISTS idx_safety_user_id 
                    ON safety_log(user_id)
                """)
                
                conn.commit()
                logger.info("–¢–∞–±–ª–∏—Ü–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            raise
    
    def can_parse(self, user_id: str) -> Tuple[bool, Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Tuple[bool, Dict]: (—Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–∞—Ä—Å–∏–Ω–≥, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
        """
        # –ï—Å–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω - –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        if not self.enabled:
            return True, {
                'status': 'disabled',
                'message': '‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω - –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω',
                'total_today': 0,
                'total_all_time': 0,
                'mode': 'disabled'
            }
        
        try:
            current_time = datetime.now()
            current_date = current_time.strftime('%Y-%m-%d')
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute("""
                    SELECT last_parsing_time, parsing_count_today, last_reset_date, total_parsing_count
                    FROM safety_log 
                    WHERE user_id = ?
                """, (user_id,))
                
                result = cursor.fetchone()
                
                if not result:
                    # –ü–µ—Ä–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    return True, {
                        'status': 'first_time',
                        'message': '‚úÖ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω',
                        'next_available': '–ß–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                        'total_today': 0,
                        'total_all_time': 0
                    }
                
                last_parsing_str, count_today, last_reset_date, total_count = result
                
                # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è –¥–µ–Ω—å
                if last_reset_date != current_date:
                    count_today = 0
                
                # –ï—Å–ª–∏ —É–∂–µ –ø–∞—Ä—Å–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
                if count_today > 0:
                    last_parsing = datetime.fromisoformat(last_parsing_str)
                    time_since_last = current_time - last_parsing
                    time_left = timedelta(hours=self.safety_interval_hours) - time_since_last
                    
                    if time_left.total_seconds() > 0:
                        # –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                        hours_left = int(time_left.total_seconds() // 3600)
                        minutes_left = int((time_left.total_seconds() % 3600) // 60)
                        
                        next_available_time = last_parsing + timedelta(hours=self.safety_interval_hours)
                        
                        return False, {
                            'status': 'blocked',
                            'message': f'üö´ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ä–µ–∂–∏–º–æ–º',
                            'hours_left': hours_left,
                            'minutes_left': minutes_left,
                            'next_available': next_available_time.strftime('%d.%m.%Y –≤ %H:%M'),
                            'last_parsing': last_parsing.strftime('%d.%m.%Y –≤ %H:%M'),
                            'total_today': count_today,
                            'total_all_time': total_count or 0
                        }
                
                # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω
                return True, {
                    'status': 'allowed',
                    'message': '‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ä–µ–∂–∏–º–æ–º',
                    'last_parsing': last_parsing_str if last_parsing_str else '–ù–∏–∫–æ–≥–¥–∞',
                    'total_today': count_today,
                    'total_all_time': total_count or 0
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è {user_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            return True, {
                'status': 'error',
                'message': '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω',
                'error': str(e)
            }
    
    def log_parsing(self, user_id: str, success: bool = True) -> bool:
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
        """
        # –ï—Å–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω - –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if not self.enabled:
            logger.info(f"–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {user_id} –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è")
            return True
        
        try:
            current_time = datetime.now()
            current_date = current_time.strftime('%Y-%m-%d')
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute("""
                    SELECT id, parsing_count_today, total_parsing_count, last_reset_date
                    FROM safety_log 
                    WHERE user_id = ?
                """, (user_id,))
                
                result = cursor.fetchone()
                
                if result:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    record_id, count_today, total_count, last_reset_date = result
                    
                    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è –¥–µ–Ω—å
                    if last_reset_date != current_date:
                        count_today = 0
                    
                    new_count_today = count_today + 1 if success else count_today
                    new_total_count = (total_count or 0) + 1 if success else (total_count or 0)
                    
                    cursor.execute("""
                        UPDATE safety_log 
                        SET last_parsing_time = ?,
                            parsing_count_today = ?,
                            total_parsing_count = ?,
                            last_reset_date = ?,
                            updated_at = ?
                        WHERE id = ?
                    """, (
                        current_time.isoformat(),
                        new_count_today,
                        new_total_count,
                        current_date,
                        current_time.isoformat(),
                        record_id
                    ))
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    cursor.execute("""
                        INSERT INTO safety_log 
                        (user_id, last_parsing_time, parsing_count_today, total_parsing_count, last_reset_date)
                        VALUES (?, ?, ?, ?, ?)
                    """, (
                        user_id,
                        current_time.isoformat(),
                        1 if success else 0,
                        1 if success else 0,
                        current_date
                    ))
                
                conn.commit()
                
                if success:
                    logger.info(f"–ó–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    logger.info(f"–ó–∞–ø–∏—Å–∞–Ω –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {user_id}: {e}")
            return False
    
    def get_user_safety_stats(self, user_id: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        """
        # –ï—Å–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω
        if not self.enabled:
            return {
                'user_id': user_id,
                'mode': 'disabled',
                'first_parsing': '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω',
                'last_parsing': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –≤–µ–¥–µ—Ç—Å—è',
                'today_count': 0,
                'total_count': 0,
                'can_parse_now': True,
                'status': 'disabled',
                'next_available': '–í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ',
                'safety_interval': '–û—Ç–∫–ª—é—á–µ–Ω'
            }
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT last_parsing_time, parsing_count_today, total_parsing_count, 
                           last_reset_date, created_at
                    FROM safety_log 
                    WHERE user_id = ?
                """, (user_id,))
                
                result = cursor.fetchone()
                
                if not result:
                    return {
                        'user_id': user_id,
                        'first_parsing': '–ü–∞—Ä—Å–∏–Ω–≥ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è',
                        'last_parsing': '–ù–∏–∫–æ–≥–¥–∞',
                        'today_count': 0,
                        'total_count': 0,
                        'status': 'ready'
                    }
                
                last_parsing_str, today_count, total_count, last_reset, created_at = result
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                can_parse, status_info = self.can_parse(user_id)
                
                return {
                    'user_id': user_id,
                    'first_parsing': created_at,
                    'last_parsing': last_parsing_str,
                    'today_count': today_count or 0,
                    'total_count': total_count or 0,
                    'can_parse_now': can_parse,
                    'status': status_info.get('status', 'unknown'),
                    'next_available': status_info.get('next_available', '–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å'),
                    'safety_interval': f"{self.safety_interval_hours} —á–∞—Å–æ–≤"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è {user_id}: {e}")
            return {
                'user_id': user_id,
                'error': str(e),
                'status': 'error'
            }
    
    def get_global_safety_stats(self) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        
        Returns:
            Dict: –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        # –ï—Å–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω
        if not self.enabled:
            return {
                'total_users': 0,
                'total_parsings': 0,
                'today_parsings': 0,
                'last_parsing': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –≤–µ–¥–µ—Ç—Å—è',
                'safety_interval': '–û—Ç–∫–ª—é—á–µ–Ω',
                'system_status': '‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω'
            }
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor.execute("SELECT COUNT(DISTINCT user_id) FROM safety_log")
                total_users = cursor.fetchone()[0] or 0
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Å–∏–Ω–≥–æ–≤
                cursor.execute("SELECT SUM(total_parsing_count) FROM safety_log")
                total_parsings = cursor.fetchone()[0] or 0
                
                # –ü–∞—Ä—Å–∏–Ω–≥–∏ —Å–µ–≥–æ–¥–Ω—è
                current_date = datetime.now().strftime('%Y-%m-%d')
                cursor.execute("""
                    SELECT SUM(parsing_count_today) 
                    FROM safety_log 
                    WHERE last_reset_date = ?
                """, (current_date,))
                today_parsings = cursor.fetchone()[0] or 0
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥
                cursor.execute("""
                    SELECT user_id, last_parsing_time 
                    FROM safety_log 
                    WHERE last_parsing_time IS NOT NULL
                    ORDER BY last_parsing_time DESC 
                    LIMIT 1
                """)
                last_parsing_result = cursor.fetchone()
                
                last_parsing_info = "–ù–∏–∫–æ–≥–¥–∞"
                if last_parsing_result:
                    last_user, last_time = last_parsing_result
                    last_parsing_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {last_user} –≤ {last_time}"
                
                return {
                    'total_users': total_users,
                    'total_parsings': total_parsings,
                    'today_parsings': today_parsings,
                    'last_parsing': last_parsing_info,
                    'safety_interval': f"{self.safety_interval_hours} —á–∞—Å–æ–≤",
                    'system_status': 'üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω'
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            return {
                'error': str(e),
                'system_status': '‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞'
            }
    
    def emergency_reset(self, user_id: str) -> bool:
        """
        –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–±—Ä–æ—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    UPDATE safety_log 
                    SET last_parsing_time = NULL,
                        parsing_count_today = 0,
                        updated_at = ?
                    WHERE user_id = ?
                """, (datetime.now().isoformat(), user_id))
                
                conn.commit()
                
                logger.warning(f"–í—ã–ø–æ–ª–Ω–µ–Ω —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–±—Ä–æ—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –¥–ª—è {user_id}: {e}")
            return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
safe_mode = SafeMode("dataBD/real_estate_data.db") 