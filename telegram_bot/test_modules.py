#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Telegram API
"""

import sys
import os
from datetime import datetime

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
    
    try:
        import requests
        print("‚úÖ requests - OK")
    except ImportError:
        print("‚ùå requests - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
        return False
    
    try:
        import pandas as pd
        print("‚úÖ pandas - OK")
    except ImportError:
        print("‚ùå pandas - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù") 
        return False
    
    try:
        import openpyxl
        print("‚úÖ openpyxl - OK")
    except ImportError:
        print("‚ùå openpyxl - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
        return False
    
    try:
        from config import BOT_TOKEN, DEFAULT_SEARCH_PARAMS
        print("‚úÖ config - OK")
        print(f"   –¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'–î–∞' if BOT_TOKEN else '–ù–µ—Ç'}")
        print(f"   –†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞: {DEFAULT_SEARCH_PARAMS.get('region', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')}")
    except ImportError as e:
        print(f"‚ùå config - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    return True

def test_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞...")
    
    try:
        from parser import CianParser
        parser = CianParser()
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ seen_offers
        test_user = "test_user"
        parser.save_seen_offers({123, 456, 789}, test_user)
        loaded = parser.load_seen_offers(test_user)
        
        if loaded == {123, 456, 789}:
            print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ seen_offers —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º/–∑–∞–≥—Ä—É–∑–∫–æ–π seen_offers")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False

def test_excel_generator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Excel –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
    
    try:
        from excel_generator import ExcelGenerator
        generator = ExcelGenerator()
        print("‚úÖ Excel –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_offers = [
            {
                'id': 123456,
                'price_text': '50,000 ‚ÇΩ/–º–µ—Å.',
                'price_per_month': 50000,
                'area': '100.0 –º¬≤',
                'area_numeric': 100.0,
                'address': '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
                'floor_info': '2/5',
                'types': '–û—Ñ–∏—Å',
                'description': '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
                'phones': ['+7 9123456789'],
                'url': 'https://test.url',
                'added_time': '—Å–µ–≥–æ–¥–Ω—è',
                'coordinates': {'lat': 58.0, 'lng': 56.0}
            }
        ]
        
        test_stats = {
            'total_count': 1,
            'new_count': 1,
            'seen_count': 0,
            'search_time': datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        file_path = generator.generate_report(test_offers, test_stats, "test_user")
        
        if os.path.exists(file_path):
            print(f"‚úÖ Excel –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {file_path}")
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            os.remove(file_path)
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        else:
            print("‚ùå Excel —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Excel –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

def test_real_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API Cian (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API...")
    
    try:
        from parser import parser
        
        print("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Cian.ru...")
        offers, stats = parser.parse_offers("test_user", only_new=False)
        
        print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['total_count']}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(offers)}")
        
        if offers:
            print(f"   –ü–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {offers[0].get('price_text', '–ë–µ–∑ —Ü–µ–Ω—ã')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print("   - Cian.ru –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   - –ò–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Cian Parser Bot")
    print("=" * 50)
    
    all_passed = True
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç—ã
    if not test_imports():
        all_passed = False
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("   pip3 install --user requests pandas openpyxl")
        print("   –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
    
    # –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–µ—Ä (–µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–æ—à–ª–∏)
    if all_passed and not test_parser():
        all_passed = False
    
    # –¢–µ—Å—Ç 3: Excel –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    if all_passed and not test_excel_generator():
        all_passed = False
    
    # –¢–µ—Å—Ç 4: –†–µ–∞–ª—å–Ω—ã–π API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    print("\n‚ùì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API Cian.ru? (y/N): ", end="")
    try:
        response = input().lower()
        if response in ['y', 'yes', '–¥–∞', '–¥']:
            if not test_real_api():
                print("‚ö†Ô∏è  API —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–ø—É—â–µ–Ω–æ")
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    if all_passed:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É:")
        print("   python3 bot.py")
        print("   –∏–ª–∏")
        print("   python3 run.py")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("üìñ –°–º–æ—Ç—Ä–∏—Ç–µ README.md –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ")

if __name__ == "__main__":
    main() 